/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.manchestersushifinder;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLClass;

/**
 *
 * @author Atheer
 */
public class DirectSearchPanel extends javax.swing.JPanel {

    DefaultListModel ingredientsListModel;
    DefaultListModel filteredModel = null;
    private OntologyClass myOntologyClass;
    int searchFieldLength = 0;

    /**
     * Creates new form DirectSearchPanel
     */
    public DirectSearchPanel(OntologyClass myOntologyClass) {
        this.myOntologyClass = myOntologyClass;
        initComponents();

        buildList();

        //Add key listener to the textfield
        searchField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                //If the user delete by pressing backspace
                if (searchFieldLength > searchField.getText().length()) {
                    componentsList.setModel(ingredientsListModel);
                    filterList();
                } else {
                    filterList();
                }
            }
     
            public void keyPressed(KeyEvent e) {
                searchFieldLength = searchField.getText().length();
            }
        });
    }

    private void buildList() {
        ingredientsListModel = new DefaultListModel();
        QueryTemplateEngine myEngine = new QueryTemplateEngine(myOntologyClass.getDf(), myOntologyClass.getOntologyIRI(), myOntologyClass.getReasoner());
        Collection resultCollection = myEngine.getAllIngredients();
        Object[] arr = resultCollection.toArray();

        for (int i = 0; i < arr.length; i++) {
            ingredientsListModel.addElement(arr[i]);
        }

        ListCellRenderer myRenderer = new OWLClassListCellRenderer(QueryInterface.selectedLanguage);
        componentsList.setCellRenderer(myRenderer);
        componentsList.setDragEnabled(true);
        componentsList.setModel(ingredientsListModel);
        componentsList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        componentsList.validate();
        componentsList.repaint();
        ingredientsPanel.validate();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SearchBoxPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        ingredientsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        componentsList = new javax.swing.JList();

        setPreferredSize(new java.awt.Dimension(260, 507));
        setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Search:");

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout SearchBoxPanelLayout = new javax.swing.GroupLayout(SearchBoxPanel);
        SearchBoxPanel.setLayout(SearchBoxPanelLayout);
        SearchBoxPanelLayout.setHorizontalGroup(
            SearchBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchBoxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SearchBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        SearchBoxPanelLayout.setVerticalGroup(
            SearchBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchBoxPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        add(SearchBoxPanel, java.awt.BorderLayout.PAGE_START);

        ingredientsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingredients"));

        jScrollPane1.setViewportView(componentsList);

        javax.swing.GroupLayout ingredientsPanelLayout = new javax.swing.GroupLayout(ingredientsPanel);
        ingredientsPanel.setLayout(ingredientsPanelLayout);
        ingredientsPanelLayout.setHorizontalGroup(
            ingredientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ingredientsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        ingredientsPanelLayout.setVerticalGroup(
            ingredientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ingredientsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(ingredientsPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void filterList() {

        int elemIndex = 0;


        //no duplucate values in Set.
        Set resultSet = new HashSet();
        //the new filtered model;
        filteredModel = new DefaultListModel();
        String prefix = searchField.getText().toLowerCase();
        
        for (int i = 0; i < componentsList.getModel().getSize(); i++) {

            //get the element in the model and render it in the selected language
            Object x = componentsList.getModel().getElementAt(i);
            String str = x.toString().substring(1, x.toString().length() - 1);
            IRI classIRI = IRI.create(str);
            OWLClass cls = Global.myOntology.getDf().getOWLClass(classIRI);
            String itemText = Global.myOntology.getOWLClassAlternativeLanguage(cls, QueryInterface.selectedLanguage);
            String str1 = itemText.toLowerCase();

            //do the matching check.. and take the element Index
            if (str1.startsWith(prefix)) {

                elemIndex = i;
                resultSet.add(componentsList.getModel().getElementAt(elemIndex));
            }

        }

        Iterator itr = resultSet.iterator();
        // Adding the  results set to the new model (filteredModel)
        while (itr.hasNext()) {
            filteredModel.addElement(itr.next());
        }
        // Setting the componentsList with the new filtered model
        componentsList.setModel(filteredModel);

    }

    private void searchFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyTyped
    }//GEN-LAST:event_searchFieldKeyTyped
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SearchBoxPanel;
    public static javax.swing.JList componentsList;
    private javax.swing.JPanel ingredientsPanel;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
